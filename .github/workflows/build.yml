name: Docker Build & Push

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Validate Dockerfile
        run: |
          if [ -f Dockerfile ]; then
            echo "Dockerfile validation passed."
          else
            echo "Dockerfile not found."
            exit 1
          fi

      - name: Check if package.json exists
        id: check_package_json
        run: |
          if [ -f "package.json" ]; then
            echo "package_json_exist=true" >> $GITHUB_ENV
          else
            echo "package_json_exist=false" >> $GITHUB_ENV
          fi

      - name: Run tests and install dependencies
        if: env.package_json_exist == 'true'
        run: |
          npm install
          npm test || echo "Tests failed, but continuing the pipeline."

      - name: Determine version
        id: determine_version
        run: |
          if [ -f last_successful_version.txt ]; then
            latest_version=$(cat last_successful_version.txt)
          else
            latest_version="v1.0.1"
          fi

          IFS='.' read -r major minor patch <<< "${latest_version#v}"

          # Determine the increment based on commit messages
          increment="patch"
          while IFS= read -r line; do
            if [[ "$line" =~ ^[[:space:]]*BREAKING CHANGE ]]; then
              increment="major"
              break
            elif [[ "$line" =~ ^[[:space:]]*feat ]]; then
              increment="minor"
            fi
          done < <(git log --pretty=%B -n 20)

          # Increment version number accordingly
          case $increment in
            major)
              new_version="v$(($major + 1)).0.0"
              ;;
            minor)
              new_version="v$major.$(($minor + 1)).0"
              ;;
            patch)
              new_version="v$major.$minor.$(($patch + 1))"
              ;;
          esac
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version"

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ env.new_version }}" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_ENV
          else
            echo "tag_exists=false" >> $GITHUB_ENV
          fi

      - name: Create new tag
        if: env.new_version != 'v1.0.1' && env.tag_exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: docker_build
        if: env.tag_exists == 'false'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ci-cd-version:${{ env.new_version }}
          build-args: |
            version=${{ env.new_version }}
          load: false
          no-cache: false
          pull: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          package_json_exist: ${{ env.package_json_exist }}
          new_version: ${{ env.new_version }}
          tag_exists: ${{ env.tag_exists }}

      - name: Store last successful version
        if: ${{ steps.docker_build.outputs.pushed }}

        run: echo ${{ env.new_version }} > last_successful_version.txt

      - name: Commit last successful version
        if: ${{ steps.docker_build.outputs.pushed }}

        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add last_successful_version.txt
          git commit -m "Update last successful version to ${{ env.new_version }}"
          git push origin main

      - name: Save Docker image name
        if: ${{ steps.docker_build.outputs.pushed }}

        run: echo "${{ secrets.DOCKER_USERNAME }}/ci-cd-version:${{ env.new_version }}" > docker_image_name.txt

      - name: Commit Docker image name
        if: ${{ steps.docker_build.outputs.pushed }}

        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add docker_image_name.txt
          git commit -m "Save Docker image name"
          git push origin main
