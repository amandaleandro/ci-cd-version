name: Docker Build & Push

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Validate Dockerfile
        run: |
          if [ -f Dockerfile ]; then
            echo "Dockerfile validation passed."
          else
            echo "Dockerfile not found."
            exit 1
          fi

      - name: Check if package.json exists
        id: check_package_json
        run: |
          if [ -f "package.json" ]; then
            echo "package_json_exist=true" >> $GITHUB_ENV
          else
            echo "package_json_exist=false" >> $GITHUB_ENV
          fi

      - name: Run tests and install dependencies
        if: env.package_json_exist == 'true'
        run: |
          npm install
          npm test || echo "Tests failed, but continuing the pipeline."

      - name: Determine version
        id: determine_version
        run: |
          #!/usr/bin/env bash
  
          # Determine the latest version from the file or set a default
          if [ -f last_successful_version.txt ]; then
              latest_version=$(cat last_successful_version.txt)
          else
              latest_version="v1.0.1"
          fi
  
          # Split the version number into major, minor, and patch
          IFS='.' read -r major minor patch <<< "${latest_version#v}"
  
          # Determine the increment based on commit messages
          increment="patch"
          while IFS= read -r line; do
              if [[ "$line" =~ ^[[:space:]]*BREAKING[[:space:]]+CHANGE ]]; then
                  increment="major"
                  break
              elif [[ "$line" =~ ^[[:space:]]*feat ]]; then
                  increment="minor"
              fi
          done < <(git log --pretty=%B -n 20)
  
          # Increment version number accordingly
          case $increment in
              major)
                  new_version="v$((major + 1)).0.0"
                  ;;
              minor)
                  new_version="v$major.$((minor + 1)).0"
                  ;;
              patch)
                  new_version="v$major.$minor.$((patch + 1))"
                  ;;
          esac
  
          # Set the new version as an output variable for GitHub Actions
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version"

      - name: Store last successful version
        if: ${{ steps.determine_version.outputs.new_version != 'v1.0.1' }}
        run: echo ${{ env.new_version }} > last_successful_version.txt

      - name: Commit last successful version
        if: ${{ steps.determine_version.outputs.new_version != 'v1.0.1' }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add last_successful_version.txt
          git commit -m "Update last successful version to ${{ env.new_version }}"
          git push origin main

      - name: Check if Dockerfile.intermediate exists
        run: |
          if [ -f Dockerfile.intermediate ]; then
            echo "Dockerfile.intermediate found."
          else
            echo "Dockerfile.intermediate not found."
            exit 1
          fi

      - name: Build intermediate Docker image
        run: |
          docker build -t intermediate-image:latest -f Dockerfile.intermediate .
      
      - name: Build and push production Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ env.new_version }}
