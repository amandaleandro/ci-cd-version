name: Docker Build & Push

on:
  push:
    branches:
      - main # ajuste conforme sua branch principal

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Validate Dockerfile
        run: docker build --pull --no-cache -t ${{ github.repository }}:${{ github.ref_name }} -f Dockerfile .

      - name: Check if package.json exists
        id: check_package_json
        run: |
          if [ -f "package.json" ]; then
            echo "package_json_exist=true" >> $GITHUB_ENV
          else
            echo "package_json_exist=false" >> $GITHUB_ENV
          fi

      - name: Run tests and install dependencies
        if: env.package_json_exist == 'true'
        run: |
          npm install
          npm test

      - name: Determine version
        id: determine_version
        run: |
          current_version=$(git tag | sort -V | tail -n1)
          IFS='.' read -r major minor patch <<< "$current_version"
          increment=$(echo major)
          case $increment in
            major)
              new_version="v.$(($major + 1)).0.0"
              ;;
            minor)
              new_version="v.$major.$(($minor + 1)).0"
              ;;
            patch)
              new_version="v.$major.$minor.$(($patch + 1))"
              ;;
          esac
          
          # Verifica se a tag já existe e incrementa até encontrar uma versão única
          while git rev-parse $new_version >/dev/null 2>&1; do
            echo "A versão $new_version já existe. Incrementando..."
            IFS='.' read -r major minor patch <<< "$new_version"
            case $increment in
              major)
                new_version="v.$(($major + 1)).0.0"
                ;;
              minor)
                new_version="v.$major.$(($minor + 1)).0"
                ;;
              patch)
                new_version="v.$major.$minor.$(($patch + 1))"
                ;;
            esac
          done
          
          echo "::set-output name=new_version::$new_version"

      - name: Create new tag
        id: create_tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.determine_version.outputs.new_version }}
          git push origin ${{ steps.determine_version.outputs.new_version }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile # caminho para o Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ci-cd-version:${{ steps.determine_version.outputs.new_version }}
