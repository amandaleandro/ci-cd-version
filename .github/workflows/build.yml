name: Docker Build & Push

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Lint Dockerfile
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile || true

      - name: Pre-process Dockerfile to remove circular dependency
        run: |
          sed -i '/COPY --from/d' Dockerfile

      - name: Validate Dockerfile
        run: docker build --pull --no-cache -t ninesbr/nines-callcenter:main -f Dockerfile . || {
            echo "Dockerfile validation failed.";
            exit 1;
          }

      - name: Determine version
        id: determine_version
        run: |
          if [ -f last_successful_version.txt ]; then
            latest_version=$(cat last_successful_version.txt)
          else
            latest_version="v0.0.0"
          fi
          IFS='.' read -r major minor patch <<< "${latest_version#v}"

          latest_commit_message=$(git log -1 --pretty=%B)
          if [[ "$latest_commit_message" == *"BREAKING CHANGE"* ]]; then
            increment="major"
          elif [[ "$latest_commit_message" == *"feature"* ]]; then
            increment="minor"
          else
            increment="patch"
          fi

          case $increment in
            major)
              new_version="v$(($major + 1)).0.0"
              ;;
            minor)
              new_version="v$major.$(($minor + 1)).0"
              ;;
            patch)
              new_version="v$major.$minor.$(($patch + 1))"
              ;;
          esac
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version"

      # Restante da esteira continua abaixo...
