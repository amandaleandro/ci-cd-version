name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.8.1'  # Versão específica do Node.js compatível com Semantic Release

      - name: Install dependencies with npm install
        run: |
          npm cache clean --force
          npm install --force

      - name: Extract version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Check if version is less than 1.0.0 or not exist
        id: check_version
        run: |
          if [[ -z "${VERSION}" ]] || [[ "$(printf '%s\n' "1.0.0" "${VERSION}" | sort -V | head -n1)" == "1.0.0" ]]; then
            echo "Setting version to 1.0.0"
            echo "VERSION=1.0.0" >> $GITHUB_ENV
          fi

      - name: Release
        if: steps.check_version.outputs.VERSION == '1.0.0'
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Release
        if: steps.check_version.outputs.VERSION != '1.0.0'
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release

  build-and-push-docker:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Check if version is less than 1.0.0 or not exist
        id: check_version
        run: |
          if [[ -z "${VERSION}" ]] || [[ "$(printf '%s\n' "1.0.0" "${VERSION}" | sort -V | head -n1)" == "1.0.0" ]]; then
            echo "Setting version to 1.0.0"
            echo "VERSION=1.0.0" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        run: |
          docker build -t my-docker-repo/my-app:${{ steps.get_version.outputs.VERSION }} .
          docker push my-docker-repo/my-app:${{ steps.get_version.outputs.VERSION }}
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}




